import { GetServerSideProps } from 'next'
import { useEffect, useState } from 'react'
import Head from 'next/head'
import Card from '../../components/Card'
import styled from 'styled-components'
import colors from '../../utils/colors'
import { breakpoints as bp } from '../../utils/layout'
import { connectToDatabase } from '../../lib/mongodb'
import { useJsApiLoader, GoogleMap, MarkerF } from '@react-google-maps/api'

export type CardProps = {
  id: number
  name: string
  address: string
  city: string
  operator: string
  capacity: number
}

const Container = styled.div`
  background: ${colors.gray};
  height: 100%;
`

const PageHeadingContainer = styled.div`
  background: ${colors.darkGray};
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 30px 0;
`

const Heading = styled.h1`
  text-shadow: 0.6px 0 0;
  font-size: 20px;

  @media (min-width: ${bp.md}) {
    font-size: 40px;
  }
`

const SearchInputContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px 0;
  flex-direction: row;
  width: 100%;
`
const SearchInput = styled.input`
  padding: 10px 15px;
  margin: 0 10px;
  width: 100%;
  border-radius: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
`

const StationLocationContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  @media (min-width: ${bp.lg}) {
    flex-direction: row;
    align-items: flex-start;
  }
`

const BikeStationsContainer = styled.div`
  display: flex;
  align-items: center;
  flex-direction: column;
  order: 2;
  margin: 10px;
  padding: 10px;
  width: 100%;
  border: 1px solid ${colors.darkGray};

  @media (min-width: ${bp.lg}) {
    order: 1;
    width: 40%;
  }
`
const MapContainer = styled.div`
  display: flex;
  justify-content: center;
  background: lightYellow;
  height: 50vh;
  width: 100%;
  margin: 10px;
  order: 1;

  @media (min-width: ${bp.lg}) {
    order: 2;
    width: 60%;
    height: 100vh;
  }
`

const LoadMoreButton = styled.button`
  padding: 10px;
  font-size: 13px;
  background: ${colors.yellow};
  width: 100px;
  border-radius: 5px;
  border: 1px solid ${colors.yellow};
`

const Cycling: React.FC<CardProps> = ({ stations }: any) => {
  const [searchStation, setSearchStation] = useState('')
  const [map, setMap] = useState(null)
  const [noOfStations, setNoOfStations] = useState(10)
  const [location, setLocation] = useState({
    lat: 0,
    lng: 0,
  })

  const success = (position: any) => {
    const coordinates = {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
    }
    setLocation(coordinates)
  }
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.permissions
        .query({ name: 'geolocation' })
        .then(function (result) {
          if (result.state === 'granted') {
            navigator.geolocation.getCurrentPosition(success)
          }
        })
    }
  }, [])

  const loadMore = () => {
    setNoOfStations(noOfStations + noOfStations)
  }

  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: process.env.GOOGLE_MAPS_API_KEY!,
  })

  if (!isLoaded) {
    return <div>LOADING</div>
  }

  const containerStyle = {
    width: '100%',
    height: '100%',
  }

  const blueDot = {
    fillColor: 'blue',
    fillOpacity: 1,
    path: google.maps.SymbolPath.CIRCLE,
    scale: 8,
    strokeColor: 'white',
    strokeWeight: 2,
  }

  const stationDot = {
    fillColor: 'orange',
    fillOpacity: 1,
    path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
    scale: 5,
    strokeColor: 'white',
    strokeWeight: 2,
  }

  return (
    <Container>
      <Head>
        <title>CYCLING</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <PageHeadingContainer>
        <Heading>City Bikes Helsinki and Espoo</Heading>
      </PageHeadingContainer>
      <StationLocationContainer>
        <MapContainer>
          <GoogleMap
            zoom={15}
            center={location}
            mapContainerStyle={containerStyle}
          >
            <MarkerF position={location} icon={blueDot} />
            {stations.map((station: any) => {
              return (
                <MarkerF
                  key={station._id}
                  position={{ lat: station.y, lng: station.x }}
                  title={station.Osoite}
                  label={{ text: `${station.Nimi}`, color: 'white' }}
                  icon={stationDot}
                />
              )
            })}
          </GoogleMap>
        </MapContainer>
        <BikeStationsContainer>
          <SearchInputContainer>
            <SearchInput
              placeholder='Search City Bike Station'
              value={searchStation}
              onChange={(e) => setSearchStation(e.target.value)}
            />
          </SearchInputContainer>
          {stations
            .filter((station: any) => {
              if (searchStation == '') {
                return station
              } else if (
                station.Nimi.toLowerCase().includes(searchStation.toLowerCase())
              ) {
                return station
              }
            })
            .slice(0, noOfStations)
            .map((station: any) => (
              <Card
                key={station._id}
                stationId={station.ID}
                name={station.Nimi}
                address={station.Osoite}
                city={station.Kaupunki}
                operator={station.Operaattor}
                capacity={station.Kapasiteet}
              />
            ))}
          <LoadMoreButton onClick={loadMore}>Load More</LoadMoreButton>
        </BikeStationsContainer>
      </StationLocationContainer>
    </Container>
  )
}

export default Cycling

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { db } = await connectToDatabase()

  const data = await db
    .collection('bike_stations2')
    .find({})
    .limit(1000)
    .toArray()

  const stations = JSON.parse(JSON.stringify(data))

  return {
    props: {
      stations: stations,
    },
  }
}
